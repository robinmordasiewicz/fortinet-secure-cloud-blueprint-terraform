---
name: 'Environment Provisioning'

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
      - '!main'

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  terraform:
    name: 'Terraform Init'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    outputs:
      action: ${{ steps.terraform.outputs.action }}
    steps:
      - id: terraform
        name: "${{ github.ref_name }} deployed is ${{ vars.ENVIRONMENT_DEPLOYED }}"
        shell: bash
        run: |
          if [[ -z "${{ vars.ENVIRONMENT_DEPLOYED }}" ]]
          then
            if [[ "${{ vars.ENVIRONMENT_DEPLOYED }}" == "true" ]]
            then
              echo 'action=apply' >> ${GITHUB_OUTPUT}
            else
              echo 'action=destroy' >> ${GITHUB_OUTPUT}
            fi
          else
            echo 'action=skip' >> ${GITHUB_OUTPUT}
          fi

  plan:
    needs: [terraform]
    if: needs.terraform.outputs.action == 'apply'
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Github Repository checkout
        uses: actions/checkout@v3

      - name: Microsoft Azure Authentication
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ENVIRONMENT_ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ENVIRONMENT_ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ENVIRONMENT_ARM_SUBSCRIPTION_ID }}

      - name: Hashicorp Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: terraform format
        id: format
        run: terraform fmt -check

      - name: terraform init
        id: init
        env:
          ENVIRONMENT_AZURE_TFSTATE_STORAGE_ACCOUNT_NAME: ${{ secrets.ENVIRONMENT_AZURE_TFSTATE_STORAGE_ACCOUNT_NAME }}
          ENVIRONMENT_AZURE_TFSTATE_CONTAINER_NAME: ${{ secrets.ENVIRONMENT_AZURE_TFSTATE_CONTAINER_NAME }}
          ENVIRONMENT_AZURE_TFSTATE_KEY: ${{ github.ref_name }}
          ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME: ${{ secrets.ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ENVIRONMENT_ENVIRONMENT_ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ENVIRONMENT_ENVIRONMENT_ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ENVIRONMENT_ENVIRONMENT_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
        run: terraform init -backend-config="storage_account_name=${ENVIRONMENT_AZURE_TFSTATE_STORAGE_ACCOUNT_NAME}" -backend-config="container_name=${ENVIRONMENT_AZURE_TFSTATE_CONTAINER_NAME}" -backend-config="resource_group_name=${ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME}" -backend-config="key=${ENVIRONMENT_AZURE_TFSTATE_KEY}" -backend-config="use_oidc=true" -input=false

      - name: terraform plan
        id: tf-plan
        env:
          TF_VAR_ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME: ${{ secrets.ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME }}
          TF_VAR_ENVIRONMENT_AZURE_REGION: ${{ secrets.ENVIRONMENT_AZURE_REGION }}
          TF_VAR_ENVIRONMENT_AZURE_USERNAME: ${{ secrets.ENVIRONMENT_AZURE_USERNAME }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ENVIRONMENT_ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ENVIRONMENT_ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ENVIRONMENT_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else
            exit 0
          fi

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan

      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      #- name: Push Terraform Output to PR
      #  if: github.ref != 'refs/heads/main'
      #  uses: actions/github-script@v6
      #  env:
      #    SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      #  with:
      #    github-token: ${{ secrets.GITHUB_TOKEN }}
      #    script: |
      #      const body = `${process.env.SUMMARY}`;
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: body
      #       })

  apply:
    name: 'Terraform Apply'
    if: needs.terraform.outputs.action == 'apply'
    environment:
      name: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    needs: [terraform,plan]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Microsoft Azure Authentication
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ENVIRONMENT_ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ENVIRONMENT_ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ENVIRONMENT_ARM_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        env:
          ENVIRONMENT_AZURE_TFSTATE_STORAGE_ACCOUNT_NAME: ${{ secrets.ENVIRONMENT_AZURE_TFSTATE_STORAGE_ACCOUNT_NAME }}
          ENVIRONMENT_AZURE_TFSTATE_CONTAINER_NAME: ${{ secrets.ENVIRONMENT_AZURE_TFSTATE_CONTAINER_NAME }}
          ENVIRONMENT_AZURE_TFSTATE_KEY: "tfstate"
          ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME: ${{ secrets.ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ENVIRONMENT_ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ENVIRONMENT_ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ENVIRONMENT_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
        run: terraform init -backend-config="storage_account_name=${ENVIRONMENT_AZURE_TFSTATE_STORAGE_ACCOUNT_NAME}" -backend-config="container_name=${ENVIRONMENT_AZURE_TFSTATE_CONTAINER_NAME}" -backend-config="resource_group_name=${ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME}" -backend-config="key=${ENVIRONMENT_AZURE_TFSTATE_KEY}" -backend-config="use_oidc=true" -input=false

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan

      - name: Terraform Apply
        id: apply
        env:
          ARM_CLIENT_ID: ${{ secrets.ENVIRONMENT_ARM_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ENVIRONMENT_ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ENVIRONMENT_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
        run: terraform apply -auto-approve tfplan

  destroy:
    name: 'Terraform Destroy'
    needs: [terraform]
    if: needs.terraform.outputs.action == 'destroy'
    environment:
      name: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Github repository checkout
        uses: actions/checkout@v3

      - name: Microsoft Azure Authentication
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ENVIRONMENT_ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ENVIRONMENT_ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ENVIRONMENT_ARM_SUBSCRIPTION_ID }}

      - name: Hashicorp Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: terraform init
        id: init
        env:
          ENVIRONMENT_AZURE_TFSTATE_STORAGE_ACCOUNT_NAME: ${{ secrets.ENVIRONMENT_AZURE_TFSTATE_STORAGE_ACCOUNT_NAME }}
          ENVIRONMENT_AZURE_TFSTATE_CONTAINER_NAME: ${{ secrets.ENVIRONMENT_AZURE_TFSTATE_CONTAINER_NAME }}
          ENVIRONMENT_AZURE_TFSTATE_KEY: ${{ github.ref_name }}
          ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME: ${{ secrets.ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ENVIRONMENT_ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ENVIRONMENT_ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ENVIRONMENT_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
        run: terraform init -backend-config="storage_account_name=${ENVIRONMENT_AZURE_TFSTATE_STORAGE_ACCOUNT_NAME}" -backend-config="container_name=${ENVIRONMENT_AZURE_TFSTATE_CONTAINER_NAME}" -backend-config="resource_group_name=${ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME}" -backend-config="key=${ENVIRONMENT_AZURE_TFSTATE_KEY}" -backend-config="use_oidc=true" -input=false

      - name: terraform destroy
        id: destroy
        env:
          TF_VAR_ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME: ${{ secrets.ENVIRONMENT_AZURE_RESOURCE_GROUP_NAME }}
          TF_VAR_ENVIRONMENT_AZURE_REGION: ${{ secrets.ENVIRONMENT_AZURE_REGION }}
          TF_VAR_ENVIRONMENT_AZURE_USERNAME: ${{ secrets.ENVIRONMENT_AZURE_USERNAME }}
          ARM_CLIENT_ID: ${{ secrets.ENVIRONMENT_ARM_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ENVIRONMENT_ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ENVIRONMENT_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
        run: |
          terraform destroy -auto-approve
